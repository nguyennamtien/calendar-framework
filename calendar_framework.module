<?php
// $Id$

/**
 * @file
 * Implements necessary hooks for Calendar Framework module, plus API and helper functions.
 */

/**
 * Implements hook_perm().
 */
function calendar_framework_perm() {
  return array('administer calendar framework');
}
 
/**
 * Implements hook_init().
 */
function calendar_framework_init() {

}

/**
 * Implements hook_menu().
 */
function calendar_framework_menu() {
  $items = array();
  
  $items['admin/settings/date-time/calendars'] = array(
    'title' => 'Calendars',
    'description' => 'Configuration options for available calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_framework_calendars_form'),
    'access arguments' => array('administer calendar framework'),
    'file' => 'calendar_framework.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  
  $items['admin/settings/date-time/calendars/%'] = array(
    'title callback' => 'calendar_framework_calendar_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_framework_calendar_form', 4),
    'access arguments' => array('administer calendar framework'),
    'file' => 'calendar_framework.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Calendar menu title callback.
 *
 * @param $identifier
 *   Calendar identifier.
 *
 * @return
 *   Calendar menu title.
 */
function calendar_framework_calendar_title($identifier) {
  return sprintf('%s Calendar', calendar_framework_calendars('name', $identifier));
}

/**
 * Implements hook_patch().
 *
 * @see http://drupal.org/project/patchdoq
 * @see http://doques.net/node/367
 */
function calendar_framework_patch() {
  return array(
    'common.inc' => array(
      'name' => t('Core common.inc patch'),
      'description' => t('Drupal core common.inc expansion to support hook_format_date() implementations.'),
      'file' => drupal_get_path('module', 'calendar_framework') . '/patch/common.inc-format_date.d6.patch',
      'patch arguments' => '-p0',
    ),
  );
}

/**
 * Implements hook_format_date().
 *
 * This is a temporary hook implementation which employs a procedural concept of 
 * Factory design pattern until we all get a better format_date() function at Drupal core. 
 * Till those days we need to patch the includes/common.inc file to provide 
 * the ability to implement hook_format_fate().
 *
 * @param $timestamp
 *   Unix timestamp to be formatted. 
 *   Don't worry, the proper timezone value has been added to this by format_date().
 * @param $type
 *   The format to use. Can be "small", "medium" or "large" for the preconfigured
 *   date formats. If "custom" is specified, then $format is required as well.
 * @param $format
 *   PHP date() function format string.
 * @param $langcode
 *   Optional language code to translate to a language other than the default.
 *
 * @return
 *   The formatted date or FALSE otherwise.
 *
 * @see format_date()
 * @see calendar_framework_patch()
 * @see patch/common.inc-format_date.d6.patch
 */
function calendar_framework_format_date($timestamp, $type, $format, $langcode) {
  $calendar = calendar_framework_default_calendar();

  // Skip the process, if the default calendar has not implemented a formatter callback.
  if (!isset($calendar['format callback']) || !function_exists($calendar['format callback'])) {
    return FALSE;
  }
  
  return $calendar['format callback']($timestamp, $type, $format, $langcode, $calendar);
}

/**
 * API function to provide a list of all available calendars.
 *
 * @param $op
 *   The format of return list. Could be:
 *     - calendar: Returns information about calendar identified by $identifier.
 *     - calendars: Returns a list of all available calendar informations.
 *     - name: Return the name of a calendar identified by $identifier.
 *     - names: Returns a list of all available calendar names.
 * @param $identifier
 *   A calendar identifier to filter the results.
 *
 * @return
 *   An array of calendars or a single calendar.
 *
 * @see _calendar_framework_calendars_build()
 */
function calendar_framework_calendars($op = 'calendars', $identifier = NULL) {
  list($calendars, $names) = _calendar_framework_calendars_build();

  switch ($op) {
    case 'calendars':
      return $calendars;
    
    case 'calendar':
        return is_array($calendars[$identifier]) ? array_merge($calendars[$identifier], array('identifier' => $identifier)) : NULL;
      
    case 'names':
      return $names;
      
    case 'name':
      return $names[$identifier];
  }
  
}

/**
 * Helper function to build a list of defined calendars.
 *
 * @return
 *   An array of available calendars.
 */
function _calendar_framework_calendars_build() {
  $names = array();
  $calendars = array();
  
  $calendars_defined = module_invoke_all('calendar_info');
  foreach ($calendars_defined as $identifier => $info) {
    $info['config'] = variable_get('calendar_framework_settings_' . $identifier, '');    
    $calendars[$identifier] = $info;
    $names[$identifier] = $info['name'];     
  }

  return array($calendars, $names);
}

/**
 * API function to get current default calendar.
 *
 * @return
 *   An array of default calendar information.
 */
function calendar_framework_default_calendar() {
  return calendar_framework_calendars('calendar', variable_get('calendar_framework_default_calendar', 'gregorian'));
}

